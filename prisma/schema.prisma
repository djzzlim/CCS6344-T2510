generator client {
  provider = "prisma-client-js"
  
}


datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  UserID       String   @id @default(cuid()) @db.NVarChar(50)
  Role         String   @db.NVarChar(20)  
  Email        String?  @unique @db.NVarChar(255)
  FirstName    String?  @db.NVarChar(100)
  LastName     String?  @db.NVarChar(100)
  PasswordHash String   @db.NVarChar(255)
  ContactNumber String? @db.NVarChar(20)
  DateOfBirth   DateTime? @db.Date
  AddressLine1  String? @db.NVarChar(255)
  AddressLine2  String? @db.NVarChar(255)
  City          String? @db.NVarChar(100)
  State         String? @db.NVarChar(100)
  ZipCode       String? @db.NVarChar(10)
  AccountOpenDate DateTime? @db.Date

  accounts   Account[]
  sessions   Session[]
}

model Account {
  AccountID           String     @id(map: "PK__Account__349DA5866C4EEDE0") @default(cuid()) @db.NVarChar(50)
  UserID              String?    @db.NVarChar(50)
  Status              String?    @db.NVarChar(50)
  Balance             Decimal?   @db.Decimal(18, 2)
  AccountType         String?    @db.NVarChar(50)
  user                User?      @relation(fields: [UserID], references: [UserID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Account__UserID__3F466844")
  payments            Payment[]
  transfersFrom       Transfer[] @relation("FromTransfers")
  transfersTo         Transfer[] @relation("ToTransfers")
}

model Transfer {
  TransferID    String    @id(map: "PK__Transfer__9549017197AAB778") @default(cuid()) @db.NVarChar(50)
  ToAccountID   String?   @db.NVarChar(50)
  FromAccountID String?   @db.NVarChar(50)
  Amount        Decimal?  @db.Decimal(18, 2)
  Description   String?   @db.NVarChar(255)
  CreatedAt     DateTime? @default(now(), map: "DF__Transfer__Create__440B1D61") @db.DateTime
  UpdatedAt     DateTime? @db.DateTime
  Status        String?   @db.NVarChar(50)
  TransferType  String?   @db.NVarChar(50)
  fromAccount   Account?  @relation("FromTransfers", fields: [FromAccountID], references: [AccountID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Transfer__FromAc__4316F928")
  toAccount     Account?  @relation("ToTransfers", fields: [ToAccountID], references: [AccountID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Transfer__ToAcco__4222D4EF")
}

model Utilities {
  UtilityID     String    @id(map: "PK__Utilitie__8B7E2E3F82A1A959") @default(cuid()) @db.NVarChar(50)
  AccountName   String?   @db.NVarChar(255)
  AccountNumber String   @db.NVarChar(100) @unique
  payments      Payment[]
}

model Payment {
  PaymentID   String     @id(map: "PK__Payment__9B556A58967EF3CC") @default(cuid()) @db.NVarChar(50)
  AccountID   String?    @db.NVarChar(50)
  UtilityID   String?    @db.NVarChar(50)
  Amount      Decimal?   @db.Decimal(18, 2)
  Timestamp   DateTime?  @default(now(), map: "DF__Payment__Timesta__4AB81AF0") @db.DateTime
  Description String?    @db.NVarChar(255)
  account     Account?   @relation(fields: [AccountID], references: [AccountID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Payment__Account__48CFD27E")
  utility     Utilities? @relation(fields: [UtilityID], references: [UtilityID], onDelete: NoAction, onUpdate: NoAction, map: "FK__Payment__Utility__49C3F6B7")
}

model AUDIT_LOGS {
  id         String    @id(map: "PK__AUDIT_LO__3213E83FC4D174A0") @default(cuid()) @db.NVarChar(50)
  timestamp  DateTime? @default(now(), map: "DF__AUDIT_LOG__times__4D94879B") @db.DateTime
  actor_type String?   @db.NVarChar(50)
  actor_id   String?   @db.NVarChar(50)
  action     String?   @db.NVarChar(255)
  target_id  String?   @db.NVarChar(50)
  status     String?   @db.NVarChar(50)
}

model Session {
  SessionID String   @id @default(cuid()) @db.NVarChar(50)
  UserID    String   @db.NVarChar(50)
  ExpiresAt DateTime
  CreatedAt DateTime @default(now()) @db.DateTime
  UpdatedAt DateTime @updatedAt @db.DateTime

  user User @relation(fields: [UserID], references: [UserID], onDelete: Cascade, map: "FK__Session__UserID")

  @@map("Session")
}